{
  "_args": [
    [
      {
        "raw": "reliable@git+https://github.com/michelle/reliable.git",
        "scope": null,
        "escapedName": "reliable",
        "name": "reliable",
        "rawSpec": "git+https://github.com/michelle/reliable.git",
        "spec": "git+https://github.com/michelle/reliable.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:michelle/reliable.git",
          "sshUrl": "git+ssh://git@github.com/michelle/reliable.git",
          "httpsUrl": "git+https://github.com/michelle/reliable.git",
          "gitUrl": "git://github.com/michelle/reliable.git",
          "shortcut": "github:michelle/reliable",
          "directUrl": "https://raw.githubusercontent.com/michelle/reliable/master/package.json"
        }
      },
      "C:\\Users\\Admin\\Desktop\\streamlinh3008\\node_modules\\peerjs"
    ]
  ],
  "_from": "git+https://github.com/michelle/reliable.git",
  "_id": "reliable@0.1.0",
  "_inCache": true,
  "_location": "/reliable",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reliable@git+https://github.com/michelle/reliable.git",
    "scope": null,
    "escapedName": "reliable",
    "name": "reliable",
    "rawSpec": "git+https://github.com/michelle/reliable.git",
    "spec": "git+https://github.com/michelle/reliable.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:michelle/reliable.git",
      "sshUrl": "git+ssh://git@github.com/michelle/reliable.git",
      "httpsUrl": "git+https://github.com/michelle/reliable.git",
      "gitUrl": "git://github.com/michelle/reliable.git",
      "shortcut": "github:michelle/reliable",
      "directUrl": "https://raw.githubusercontent.com/michelle/reliable/master/package.json"
    }
  },
  "_requiredBy": [
    "/peerjs"
  ],
  "_resolved": "git+https://github.com/michelle/reliable.git#f09ba29d57a05beaa07990171f3fe7b746587aaa",
  "_shasum": "7903523ae468519adb56ff0deb12ad7d6432da7c",
  "_shrinkwrap": null,
  "_spec": "reliable@git+https://github.com/michelle/reliable.git",
  "_where": "C:\\Users\\Admin\\Desktop\\streamlinh3008\\node_modules\\peerjs",
  "dependencies": {
    "js-binarypack": "0.0.9"
  },
  "description": "Reliable DataChannels.",
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-browserify": "^3.0.1",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-concat": "^0.5.0",
    "grunt-contrib-uglify": "^0.5.1"
  },
  "gitHead": "f09ba29d57a05beaa07990171f3fe7b746587aaa",
  "main": "./lib/reliable.js",
  "name": "reliable",
  "optionalDependencies": {},
  "readme": "# Reliable transfer over DataChannels\r\n\r\n\r\n## Reliable\r\n\r\n`new Reliable(dc)`: A reliable utility class for DataChannel. Takes in a `DataChannel` object.\r\n* `.send(msg)`: Takes any message and sends it reliably.\r\n* `.onmessage(msg)`: Called when data is received.\r\n\r\n`Reliable.higherBandwidthSDP(sdp)`: This need to be applied to all offer/answer SDPs for Reliable to function properly. Returns the new SDP with added bandwidth. See usage below.\r\n\r\n```js\r\n// Assuming 2 PeerConnections pc1, pc2.\r\npc1.createOffer(function(offer) {\r\n  offer.sdp = Reliable.higherBandwidthSDP(offer.sdp);\r\n  pc1.setLocalDescription(offer, ...);\r\n});\r\n\r\n...\r\n\r\n// Same process for answer.\r\npc2.createAnswer(function(answer) {\r\n  answer.sdp = Reliable.higherBandwidthSDP(answer.sdp);\r\n  pc2.setLocalDescription(answer, ...);\r\n});\r\n```\r\n\r\n## Internal message format\r\n\r\n### ACK\r\n\r\nThis is an ACK for a chunk of the message.\r\n\r\n```js\r\n[\r\n  /* type */  'ack',\r\n  /* id */    message_id,\r\n  /* ACK */   n   // The next chunk # expected.\r\n]\r\n```\r\n\r\n### Chunk\r\n\r\nThis is a chunk of the message.\r\n\r\n```js\r\n[\r\n  /* type */  'chunk',\r\n  /* id */    message_id,\r\n  /* n */     n,       // The chunk #.\r\n  /* chunk */ chunk   // The actual binary chunk.\r\n]\r\n```\r\n\r\n\r\n### END\r\n\r\nThis is the end of a message.\r\n\r\n```js\r\n[\r\n  /* type */  'end',\r\n  /* id */    message_id,\r\n  /* n */     n       // The last index.\r\n]\r\n```\r\n\r\n\r\n### Unchunked message\r\n\r\nThis is a message that was able to be sent without being chunked.\r\n\r\n```js\r\n[\r\n  /* type */  'no',\r\n  /* msg */   payload\r\n]\r\n```\r\n\r\n## Future plans\r\n\r\nUse stream API.\r\n",
  "readmeFilename": "README.md",
  "scripts": {
    "prepublish": "grunt"
  },
  "version": "0.1.0"
}
